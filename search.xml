<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C sharp three</title>
      <link href="/posts/aeef.html"/>
      <url>/posts/aeef.html</url>
      
        <content type="html"><![CDATA[<h2 id="C-sharp-三"><a href="#C-sharp-三" class="headerlink" title="C sharp(三)"></a>C sharp(三)</h2><h4 id="一-泛型"><a href="#一-泛型" class="headerlink" title="一.泛型"></a>一.泛型</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class Pig&lt;T&gt;&#123;    public T x;    public T y;    public T z;    public Pig(T x,T y,T z)    &#123;        this.x&#x3D;x;        this.y&#x3D;y;        this.z&#x3D;z;    &#125;&#125;Pig&lt;string&gt; p1&#x3D;new Pig&lt;string&gt;(&quot;&quot;,&quot;1&quot;,&quot;2&quot;);&#x2F;&#x2F;new()要求有默认构造函数，可以调用new T();&#x2F;&#x2F;函数泛型有约束public static void Attack&lt;T&gt;()    where T:Hero&#123;            &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二-容器"><a href="#二-容器" class="headerlink" title="二.容器"></a>二.容器</h4><p>1.动态数组</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">List&lt;int&gt; ListInt &#x3D; new List&lt;int&gt;();&#x2F;&#x2F;动态数组<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.HashSet的特点：一组不包含重复元素的集合。</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">HashSet&lt;string&gt; set &#x3D; new HashSet&lt;string&gt;();set.Add(&quot;1&quot;);set.Add(&quot;2&quot;);set.Add(&quot;1&quot;);set.Add(&quot;3&quot;);set.Add(&quot;4&quot;);foreach(var n in set)&#123;    Console.WriteLine(n);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1出现两次，只显示一次。</p><p>3.Queue:先进先出</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Queue q &#x3D; new Queue();q.Enqueue(&quot;A&quot;);q.Enqueue(&quot;B&quot;);q.Enqueue(&quot;C&quot;);Console.Write(&quot;队列中的元素：\t&quot;);foreach(var n in q)&#123;    Console.Write(n + &quot;\t&quot;);&#125;Console.WriteLine();q.Enqueue(&quot;D&quot;);q.Enqueue(&quot;E&quot;);Console.Write(&quot;增加后队列中的元素：\t&quot;);foreach (var n in q)&#123;    Console.Write(n + &quot;\t&quot;);&#125;Console.WriteLine();Console.Write(&quot;出队元素：&quot;);Console.WriteLine(q.Dequeue());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.Stack:后进先出</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Stack st &#x3D; new Stack();st.Push(&quot;A&quot;);st.Push(&quot;B&quot;);st.Push(&quot;C&quot;);st.Push(&quot;D&quot;);Console.Write(&quot;当前栈：\t&quot;);foreach(var n in st)&#123;    Console.Write(n + &quot;\t&quot;);&#125;Console.WriteLine();st.Push(&quot;E&quot;);st.Push(&quot;F&quot;);Console.Write(&quot;当前栈：\t&quot;);foreach (var n in st)&#123;    Console.Write(n + &quot;\t&quot;);&#125;Console.WriteLine();Console.WriteLine(&quot;出栈的元素：&quot; + st.Pop());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.HashTable:key-value的形式来存取数据的</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Hashtable table &#x3D; new Hashtable();table.Add(&quot;名字&quot;, &quot;张三&quot;);table.Add(&quot;年龄&quot;, 10);table.Add(&quot;爱好&quot;, &quot;游泳&quot;);foreach(DictionaryEntry entry in table)&#123;    Console.Write(entry.Key + &quot;:&quot;);    Console.WriteLine(entry.Value);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.Dictionary&lt; T &gt;:泛型的HashTable.</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">class Person&#123;    public string name;    public int age;    public string hobby;    public override string ToString()    &#123;        return &quot;name&#x3D;&quot; + name + &quot;,age&#x3D;&quot; + age + &quot;,hobby&#x3D;&quot; + hobby;    &#125;&#125;class Program&#123;    static void Main(string[] args)    &#123;        Dictionary&lt;string, Person&gt; dictionary &#x3D; new Dictionary&lt;string, Person&gt;();        Person person1 &#x3D; new Person() &#123; name &#x3D; &quot;张三&quot;, age &#x3D; 20, hobby &#x3D; &quot;游泳&quot; &#125;;        Person person2 &#x3D; new Person() &#123; name &#x3D; &quot;李四&quot;, age &#x3D; 21, hobby &#x3D; &quot;篮球&quot; &#125;;        dictionary.Add(&quot;学生1&quot;, person1);        dictionary.Add(&quot;学生2&quot;, person2);        foreach(KeyValuePair&lt;string, Person&gt; pair in dictionary)        &#123;            Console.Write(pair.Key + &quot;：&quot;);            Console.WriteLine(pair.Value.ToString());        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转自<a href="https://blog.csdn.net/weixin_42103026/article/details/89080836">https://blog.csdn.net/weixin_42103026/article/details/89080836</a></p><h4 id="三-特性和反射"><a href="#三-特性和反射" class="headerlink" title="三.特性和反射"></a>三.特性和反射</h4><p>反射获取类型变量函数等代码信息。</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Type t &#x3D; tc.GetType();&#x2F;&#x2F;获得该类的Type&#x2F;&#x2F;再用Type.GetProperties获得PropertyInfo[],然后就可以用foreach 遍历了foreach (PropertyInfo pi in t.GetProperties&#123;    object value1 &#x3D; pi.GetValue(tc, null));&#x2F;&#x2F;用pi.GetValue获得值    string name &#x3D; pi.Name;&#x2F;&#x2F;获得属性的名字,后面就可以根据名字判断来进行些自己想要的操作    &#x2F;&#x2F;获得属性的类型,进行判断然后进行以后的操作,例如判断获得的属性是整数   if(value1.GetType() &#x3D;&#x3D; typeof(int))   &#123;       &#x2F;&#x2F;进行你想要的操作   &#125;&#125;         &#x2F;&#x2F;转载自https:&#x2F;&#x2F;www.cnblogs.com&#x2F;xishuqingchun&#x2F;p&#x2F;3803116.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="四-宏"><a href="#四-宏" class="headerlink" title="四.宏"></a>四.宏</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#define    定义宏#undef      取消已定义的宏#if        如果给定条件为真，则编译下面代码#ifdef      如果宏已经定义，则编译下面代码#ifndef    如果宏没有定义，则编译下面代码#elif      如果前面的#if给定条件不为真，当前条件为真，则编译下面代码#endif      结束一个#if……#else条件编译块#error      停止编译并显示错误信息    &#x2F;&#x2F;转自https:&#x2F;&#x2F;www.cnblogs.com&#x2F;kuangwu&#x2F;archive&#x2F;2013&#x2F;06&#x2F;07&#x2F;3124007.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C sharp基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C sharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html 笔记</title>
      <link href="/posts/ad16.html"/>
      <url>/posts/ad16.html</url>
      
        <content type="html"><![CDATA[<p>CSS伪类用于向某些选择器添加特殊的效果。</p><p>:active 向被激活的元素添加样式。<br>:focus 向拥有键盘输入焦点的元素添加样式。<br>:hover 当鼠标悬浮在元素上方时，向元素添加样式。<br>:link 向未被访问的链接添加样式。<br>:visited 向已被访问的链接添加样式。</p><hr><p>块级元素： div、p、h1-h6、form、ul、ol、dl、dt、dd、li、table、tr、td、th、hr 行内元素： span、img、a、label、code、input、abbr、em、b、big、cite、i、q、textarea、select、small、sub、sup，strong、u</p><p>行内块级:input，img</p><hr><p>date 选取日、月、年 month 选取月和年 week 选取周和年 time 选取时间（小时和分钟）</p><hr><p><strong>CSS</strong> 选择器优先级：</p><p>内联样式 &gt; ID 选择器 &gt; 伪类 &gt; 属性选择器 &gt; 类选择器 &gt; 元素（类型）选择器 &gt; 通用选择器</p><hr><pre class="line-numbers language-none"><code class="language-none">display: none和visibility:hidden的区别就是visibility:hidden会保留元素的空间repaint(重绘) ，repaint发生更改时，元素的外观被改变，且在没有改变布局的情况下发生，如改变outline,visibility,background color，不会影响到dom结构渲染。reflow(渲染)，与repaint区别就是他会影响到dom的结构渲染，同时他会触发repaint，他会改变他本身与所有父辈元素(祖先)，这种开销是非常昂贵的，导致性能下降是必然的，页面元素越多效果越明显。所以display:none才会产生reflowvisibility:hidden只会出发repaint<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>不可继承的：display、margin、border、padding、background、height、min-height、max- height、width、min-width、max-width、overflow、position、left、right、top、 bottom、z-index、float、clear、table-layout、vertical-align、page-break-after、 page-bread-before和unicode-bidi。</p><p>所有元素可继承：visibility和cursor。</p><p>内联元素可继承：letter-spacing、word-spacing、white-space、line-height、color、font、 font-family、font-size、font-style、font-variant、font-weight、text- decoration、text-transform、direction。</p><p>块状元素可继承：text-indent和text-align。</p><p>列表元素可继承：list-style、list-style-type、list-style-position、list-style-image。</p><p>表格元素可继承：border-collapse。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C sharp two</title>
      <link href="/posts/8a3a.html"/>
      <url>/posts/8a3a.html</url>
      
        <content type="html"><![CDATA[<h1 id="C-sharp-二"><a href="#C-sharp-二" class="headerlink" title="C sharp(二)"></a>C sharp(二)</h1><h4 id="一-class和struct"><a href="#一-class和struct" class="headerlink" title="一.class和struct"></a>一.class和struct</h4><p><strong>Class</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;class Dog             &#x2F;&#x2F;定义一个狗类&#123;    int age;    public string name;    public const int maxage&#x3D;100;   &#x2F;&#x2F;公共常量    public static bool swim&#x3D;true; &#x2F;&#x2F;静态变量    public static void Write()    &#123;        Console.WriteLine(&quot;嘉然小姐的狗捏&quot;);    &#125;&#125;Dog dog&#x3D;new dog();dog.name&#x3D;&quot;嘉心糖&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>partical修饰符</p><p>第一个cs文件</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public partial class A&#123;    int a1;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第二个cs文件</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public partial class A&#123;    int a2;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>等于</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class A&#123;    int a1;    int a2;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">partical class Dog&#123;    public void SetAge(int value)    &#123;        this.age&#x3D;value;    &#125;    public static SetAge(Dog _this,int value)    &#123;        _this.age&#x3D;value;    &#125;                                &#x2F;&#x2F;静态方法属于类，非静态方法属于变量    public Dog()    &#123;        this.age&#x3D;21;        this.name&#x3D;&quot;&quot;;    &#125;    public Dog(string name)    &#123;        this.age&#x3D;21;        this.name&#x3D;name;    &#125; &#x2F;&#x2F;构造函数可以理解为初始化,无返回值。&#125;Dog dog0&#x3D;new Dog();Dog dog1&#x3D;new Dog(&quot;嘉心糖&quot;);Dog dog2&#x3D;new Dog(&quot;顶碗人&quot;);Dog.SetAge(dog0,20);&#x2F;&#x2F;静态函数dog0.SetAge(20);&#x2F;&#x2F;调用函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Struct"><a href="#Struct" class="headerlink" title="Struct"></a>Struct</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">struct Dog2&#123; &#x2F;&#x2F;格式同class   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Struct是值类型，class是引用类型</p><p>struct 在栈中进行内存分配，函数调用完后回收，class是在堆中分配，在C#运行中回收。</p><p>函数调用过程中，class复制地址，即复制后的变量数值变了，复制前的也要变。struct是复制数据，不影响复制前的。</p><p>如果想要struct也可以被修改，则加个ref。</p><h4 id="二-继承"><a href="#二-继承" class="headerlink" title="二.继承"></a>二.继承</h4><p>class B:A{</p><p>} </p><p>类型B继承自类型A，A叫做父类，B叫做子类</p><p>B从A中继承属性和方法。</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using system;partical class Hero&#123;    int health；    int power;    public Hero&#123;        this.health&#x3D;100；    &#125;    public void heal&#123;        health +&#x3D;10；    &#125;    public void Attack    &#123;        Console.WriteLine($&quot;&#123;name&#125;使用水溅跃，无事发生&quot;);    &#125;&#125;class JiaXintang : Hero&#123;    public override heal&#123;health +&#x3D;100;&#x2F;&#x2F;嘉心糖恢复的更快捏    &#125;    public void skill1&#123;        this.power&#x3D;100;        this.Attack;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>父类引用可以存储子类对象:</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Hero peopele1&#x3D;new JiaXintang();&#x2F;&#x2F;嘉心糖是英雄，但英雄不一定是嘉心糖<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所有类型的基类System.Object</p><p>public class object{</p><p>}</p><hr>]]></content>
      
      
      <categories>
          
          <category> C sharp基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C sharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>renpy</title>
      <link href="/posts/38a3.html"/>
      <url>/posts/38a3.html</url>
      
        <content type="html"><![CDATA[<p>renpy</p><p>尝试做galgame的时候再学</p>]]></content>
      
      
      
        <tags>
            
            <tag> renpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C sharp</title>
      <link href="/posts/9518.html"/>
      <url>/posts/9518.html</url>
      
        <content type="html"><![CDATA[<h1 id="C-sharp-一"><a href="#C-sharp-一" class="headerlink" title="C sharp(一)"></a>C sharp(一)</h1><p>编译:高级语言→汇编语言→机器指令。</p><p>tip:C#类型均继承自一个object类型;</p><h4 id="一-变量的定义方式"><a href="#一-变量的定义方式" class="headerlink" title="一.变量的定义方式"></a>一.变量的定义方式</h4><p>变量的定义方式:</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">&#x2F;&#x2F;typename(类型名)   varName(变量名)&#x3D; initval(参数)&#x2F;&#x2F;注意: uint 大小4b 表示无符号整数&#x2F;&#x2F;      char 存储单个字符  char a&#x3D;&#39;s&#39;;&#x2F;&#x2F;      string 字符串     string b&#x3D;&quot;hello , world &quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二-数组-t"><a href="#二-数组-t" class="headerlink" title="二.数组(t[])"></a>二.数组(t[])</h4><p>数组的定义:</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">&#x2F;&#x2F; int[] ary&#x3D;new int[10];&#x2F;&#x2F; 类型[]数组名称&#x3D;new类型数组大小;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>数组的访问和设置:</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">ary[0]&#x3D;3       &#x2F;&#x2F;ary数组第一个数是3int inval&#x3D;ary[3]   &#x2F;&#x2F;把数组的第四个数赋值给inval;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="三-类型互转"><a href="#三-类型互转" class="headerlink" title="三.类型互转"></a>三.类型互转</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">&#x2F;*  &#x2F;&#x2F; double a&#x3D;6.28 float b&#x3D;3.14f  float c  &#x3D; (float) a; &#x2F;&#x2F;显式类型转换  double d &#x3D; b    &#x2F;&#x2F;隐式类型转换  int e &#x3D;(int) a   &#x2F;&#x2F; e&#x3D;6  *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数值型和string互转:</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">&#x2F;*         &#x2F;&#x2F;字符转数字        string a &#x3D; &quot;711&quot;;        int val1 &#x3D; int.Parse(a);        Console.WriteLine(val1);    &#x2F;&#x2F;711        long val2 &#x3D; long.Parse(a);         Console.WriteLine(val2);&#x2F;&#x2F;711                        &#x2F;&#x2F;数字转字符        double val&#x3D;6.28;        string val3 &#x3D; val.ToString();        Console.WriteLine(val3);&#x2F;&#x2F;6.28     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="四-字符串格式化"><a href="#四-字符串格式化" class="headerlink" title="四.字符串格式化"></a>四.字符串格式化</h4><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&#x2F;*      string c &#x3D; &quot;add&quot;;        string d &#x3D; c + &quot;to&quot; + b;        string e &#x3D;$&quot;&#123;c&#125;to&#123;b&#125;&quot;;        Console.WriteLine(d);&#x2F;&#x2F;addto6        Console.WriteLine(e);&#x2F;&#x2F;addto6                                 *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="五-字符串接口"><a href="#五-字符串接口" class="headerlink" title="五.字符串接口"></a>五.字符串接口</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">&#x2F;*        string valstr&#x3D;&quot;hello,world&quot;;                       012345678910        int length&#x3D;valstr.length  &#x2F;&#x2F;字符串长度为9        int index&#x3D;valstr.indexof(&quot;llo&quot;) &#x2F;&#x2F;index&#x3D;2        string strResult&#x3D;valstr.replace(&quot;hello&quot;,&quot;你好&quot;) &#x2F;&#x2F;&quot;你好，world&quot;        string substr&#x3D;valstr.substring(6,2)&#x2F;&#x2F;下标为6长度为2     wo                        length :字符串长度        indexof：查找第一个匹配项        replace:替换指定内容        substring:求指定下标指定长度        *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>+++</p><p>—continue—-</p>]]></content>
      
      
      <categories>
          
          <category> C sharp基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C sharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown</title>
      <link href="/posts/4513.html"/>
      <url>/posts/4513.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-标题"><a href="#一-标题" class="headerlink" title="一.标题"></a>一.标题</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;输入文字加快捷键ctrl+ 1~6 对应标题 1~6&#x2F;&#x2F;或者 ###(几个#几级标题)+空格+标题   我现在三个#是三级标题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="二-代码块"><a href="#二-代码块" class="headerlink" title="二.代码块"></a>二.代码块</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//  ```+ 语言名称就出现对应语言的代码块</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三-字体"><a href="#三-字体" class="headerlink" title="三.字体"></a>三.字体</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html">*  内容 *   //斜体  ctrl+I**  内容  ** //加粗 ctrl+B***  内容  ***  //加粗斜体==  内容  == //代码高亮~~  内容  ~~ //删除线 Alt+Shift+5Ctrl+U：下划线注:实际使用无空格<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><em>斜体</em></p><p><strong>加粗</strong></p><p><em><strong>加粗斜体</strong></em></p><p><del>删除线</del></p><h2 id="四-分割线"><a href="#四-分割线" class="headerlink" title="四.分割线"></a>四.分割线</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//1.---</span><span class="token comment">//2.***</span><span class="token comment">//3.+++</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><hr><p>+++</p><h2 id="五-列表"><a href="#五-列表" class="headerlink" title="五.列表"></a>五.列表</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//1.有序列表 ctrl+shift+[</span><span class="token comment">//2.无序列表 ctrl+shift+]    </span><span class="token comment">//3.表格 ctrl+T</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>上班</td><td>上班</td><td>休息</td></tr><tr><td>上班</td><td>上班</td><td>休息</td></tr><tr><td>上班</td><td>上班</td><td>休息</td></tr></tbody></table><h2 id="六-超链接"><a href="#六-超链接" class="headerlink" title="六.超链接"></a>六.超链接</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#1.[链接名]+(链接url + "链接描述")</span><span class="token comment">#2.&lt;url></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="https://space.bilibili.com/672328094?from=search&seid=7062831064669196528" title="关注嘉然，顿顿解馋">嘉然今天吃什么</a></p><h2 id="七-图片"><a href="#七-图片" class="headerlink" title="七.图片"></a>七.图片</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#[图片名]+(图片url + "图片描述")</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://i0.hdslb.com/bfs/album/136367322a807a6ebbcb633252cc62a716f6ee11.jpg@518w.webp" title="然然睡觉图片">嘿嘿</a></p><h2 id="八-暂时无捏"><a href="#八-暂时无捏" class="headerlink" title="八.暂时无捏"></a>八.暂时无捏</h2>]]></content>
      
      
      <categories>
          
          <category> 语法教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/3eeb.html"/>
      <url>/posts/3eeb.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hello world </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
